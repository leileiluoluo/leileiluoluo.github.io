<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on 磊磊落落</title><link>https://leileiluoluo.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 25 Aug 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 13 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-13-new-features.html</link><pubDate>Sun, 25 Aug 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-13-new-features.html</guid><description>本文重点回顾 Java 13 引入的那些主要特性。
1 文本块（预览） Java 13 引入了文本块（Text Blocks）预览功能，以简化多行字符串的表示。文本块用三重引号 &amp;quot;&amp;quot;&amp;quot; 定义，支持格式化和保留换行符，使得处理多行字符串更直观。它还自动去除了前导和尾随空白，使字符串更干净，避免了传统转义字符的使用。这个预览特性为开发者提供了更好的代码可读性和维护性。</description></item><item><title>Java 12 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-12-new-features.html</link><pubDate>Tue, 13 Aug 2024 11:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-12-new-features.html</guid><description>本文重点回顾 Java 12 引入的那些主要特性。
（Java 12 主要新特性脑图） 1 Switch 表达式（预览） switch 语句是 Java 语言中除了 if-else 语句外的另一个流程控制语句。</description></item><item><title>Java 11 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-11-new-features.html</link><pubDate>Fri, 09 Aug 2024 10:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-11-new-features.html</guid><description>本文重点回顾 Java 11 引入的那些主要特性。
（Java 11 主要新特性脑图） 1 全新的 HTTP 客户端 API Java 11 引入了全新的 HTTP 客户端 API（主要有三个类 HttpClient、HttpRequest 和 HttpResponse），目的是替换现有的 HttpURLConnection API。</description></item><item><title>Java 10 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-10-new-features.html</link><pubDate>Tue, 06 Aug 2024 12:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-10-new-features.html</guid><description>本文重点回顾 Java 10 引入的那些主要特性。
（Java 10 主要新特性脑图） 1 局部变量类型推断 局部变量类型推断是 Java 10 引入的一个重要特性。这个特性使得开发者在声明局部变量时可以使用关键字 var 来代替显式地指定变量类型，而局部变量的类型会由编译器自行推断。</description></item><item><title>Java 9 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-9-new-features.html</link><pubDate>Thu, 01 Aug 2024 19:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-9-new-features.html</guid><description>本文重点回顾 Java 9 引入的那些新特性。
（Java 9 主要新特性脑图） 1 模块系统 Java 9 引入的一个最主要的特性就是模块系统（全称为 Java 平台模块系统，Java Platform Module System）。根据官方的定义，模块是一个命名的、自描述的代码和数据的集合。模块系统会在编译时和运行时之间新加一个可选的链接时，在该阶段可以将一组模块组装为一个自定义的运行时镜像。</description></item><item><title>Java 8 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-8-new-features.html</link><pubDate>Tue, 23 Jul 2024 10:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-8-new-features.html</guid><description>我们知道 Java 8 是 Java 发布历史上一个里程碑式的版本，哪怕现在 Java 的最新版本已发展到 22，但仍有相当一部分企业在使用 Java 8，可以说 Java 8 是后续 Java 新版本得以快速迭代的基石。本文即重点回顾 Java 8 引入的那些主要特性。</description></item><item><title>关于职业发展的一点感想</title><link>https://leileiluoluo.github.io/posts/some-thoughts-on-career.html</link><pubDate>Mon, 22 Jul 2024 16:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/some-thoughts-on-career.html</guid><description>&lt;p>偶然间读到曹大（曹春晖，Golang 编译器领域大牛）在博客分享的一篇关于当下互联网环境的感想（&lt;a href="https://xargin.com/ghost-story/">一些鬼故事&lt;/a>），对曹大在文章中所批判的当前经济下行背景下互联网行业企业「降本增笑」以及员工「投机取巧」乱象深有同感。&lt;/p>
&lt;p>这也引发了我对国内互联网就业环境以及自己未来职业发展的一些思考。&lt;/p></description></item><item><title>Java 虚拟机运行时数据区域划分详解</title><link>https://leileiluoluo.github.io/posts/java-virtual-machine-runtime-data-areas.html</link><pubDate>Fri, 19 Jul 2024 17:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-virtual-machine-runtime-data-areas.html</guid><description>Java 虚拟机（Java Virtual Machine，简称 JVM）是 Java 程序（字节码）的运行环境，其主要提供 Java 字节码执行（解释执行或者即时编译为本地机器码执行）、内存管理（内存分配和垃圾回收等）、多线程支持和安全控制等功能，是 Java 语言「一次编写，到处运行」口号得以实现的基石。</description></item><item><title>趣味算法题：从登录日志中计算各个用户的最长连续登录天数</title><link>https://leileiluoluo.github.io/posts/calculate-the-maximum-number-of-consecutive-login-days.html</link><pubDate>Thu, 18 Jul 2024 13:30:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/calculate-the-maximum-number-of-consecutive-login-days.html</guid><description>1 题目描述 假设我们有一个记录用户登录的日志文件，该文件有多行记录，每一行记录包含用户 ID、登录日期（格式为：yyyy-MM-dd）和登录时间（格式为：HH:mm:ss）三个以空格分割的条目。记录并不是以时间先后排序的，而是乱序的（如：样例输入中的记录 1002 2023-02-06 12:10:01 在 1002 2023-02-05 11:10:01 之前）。请计算每个用户的最长连续登录天数，输出格式为：用户 ID: 最长连续登录天数（如：样例输出中的 1002: 5）。</description></item><item><title>为什么说「组合优于继承」？</title><link>https://leileiluoluo.github.io/posts/favor-composition-over-inheritance.html</link><pubDate>Fri, 12 Jul 2024 19:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/favor-composition-over-inheritance.html</guid><description>面向对象编程中有一条经典的设计原则：组合优于继承，即多用组合少用继承。什么是继承？什么是组合？为什么不推荐使用继承？组合有哪些优势？如何判断该用组合还是该用继承？本文将围绕这几个问题来分析组合优于继承的原因。
1 什么是继承？什么是组合？ 继承（Inheritance）和组合（Composition）是面向对象编程（Object-Oriented Programming）中两种不同的代码复用机制。</description></item><item><title>Golang 泛型编程初体验</title><link>https://leileiluoluo.github.io/posts/golang-generics.html</link><pubDate>Wed, 10 Jul 2024 10:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/golang-generics.html</guid><description>Go 1.18 加入了对泛型的支持。本文将使用切片反转和对象排序两个示例场景来演示泛型的使用。
开始前，我们先了解一下泛型的基本概念。
1 泛型是什么？ 泛型（Generics）是编程语言中的一种范式，其允许在定义类（Go 中的结构体）、接口和方法（函数）时使用类型参数（Type Parameters）。这些类型参数可以用来描述方法的参数类型或者类与接口的属性类型，从而使得代码可以在不同类型之间进行重用，而不必进行类型转换或使用 Object（Go 中的 interface{}）类型来处理。</description></item><item><title>大连云原生技术开放日</title><link>https://leileiluoluo.github.io/posts/dalian-cloud-native-community-meetup.html</link><pubDate>Sat, 06 Jul 2024 14:20:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/dalian-cloud-native-community-meetup.html</guid><description>&lt;p>今天参加了大连云原生技术开放日的分享活动，主题主要围绕在云原生、AI、开源方面。&lt;/p></description></item><item><title>Serenity BDD 如何与 Cucumber 进行集成？</title><link>https://leileiluoluo.github.io/posts/serenity-bdd-cucumber-integration.html</link><pubDate>Fri, 21 Jun 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/serenity-bdd-cucumber-integration.html</guid><description>我们知道，Serenity BDD 和 Cucumber Java 是两个常用的、适用于 Java 语言的自动化测试框架。Serenity BDD 框架功能丰富、内置了对业界通用的软件测试设计模式（诸如：页面对象模型、Screenplay 模式等）的支持，而 Cucumber 框架的一大优势是可以使用类似自然语言的方式（Gherkin 语法）来编写测试场景。因此，将两者进行集成将拥有叠加的能力。</description></item><item><title>如何使用 Serenity BDD 进行 API 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-serenity-bdd.html</link><pubDate>Wed, 19 Jun 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-serenity-bdd.html</guid><description>前文「如何使用 Serenity BDD 进行 UI 测试？」介绍了使用 Serenity BDD 与 Selenium 进行 Web UI 测试的方法，但 Serenity BDD 不仅限于进行 UI 测试，还可以使用其进行 REST API 测试。本文即介绍使用 Serenity BDD 与 REST Assured 进行 API 测试的方法。</description></item><item><title>如何使用 Screenplay 模式编写 UI 测试用例？</title><link>https://leileiluoluo.github.io/posts/how-to-write-ui-test-cases-using-screenplay-pattern.html</link><pubDate>Mon, 17 Jun 2024 14:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-write-ui-test-cases-using-screenplay-pattern.html</guid><description>&lt;p>Screenplay 模式是一个用于软件测试的设计模式，本文探索如何使用 Screenplay 模式编写 Web UI 测试用例。&lt;/p>
&lt;p>本文首先会介绍 Screenplay 模式的基本概念；接着，以登录 GitHub 并在页面创建 Issue 为测试场景，来分析该场景中的操作者与行为分别对应 Screenplay 模式中的哪个部分；最后，针对该测试场景，使用 Serenity BDD 测试框架来编写满足 Screenplay 模式的测试用例，示例工程使用 Maven 管理。&lt;/p></description></item><item><title>如何使用 Serenity BDD 进行 UI 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-serenity-bdd.html</link><pubDate>Wed, 12 Jun 2024 17:50:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-serenity-bdd.html</guid><description>Serenity BDD（Behavior Driven Development，行为驱动开发）是一个支持 Java 语言的 BDD 自动化测试框架。Serenity BDD 框架功能强大，吸纳了业界诸多通用测试规范，支持页面对象模型（Page Object Model），可与 JUnit、Cucumber、Selenium、JBehave 等多种流行测试框架进行集成。此外，Serenity BDD 还提供详细的测试报告，可以直观呈现每个步骤的执行结果、页面截图、耗时情况，以及整体测试覆盖率等各项数据与指标。</description></item><item><title>Cucumber Java 如何与 Spring Boot 进行集成？</title><link>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</link><pubDate>Sun, 02 Jun 2024 14:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</guid><description>前面我们在「如何使用 Cucumber Java 进行 UI 测试？」一文中，以登录 GitHub 并在页面创建 Issue 为例介绍了 Cucumber 与 Selenium 的集成，但其中的示例工程未使用依赖注入工具，所有对象的新建均是使用原生 new 关键字来实现的。接着，我们在上文「如何在 Cucumber Java 中使用 PicoContainer 进行依赖注入？」介绍了在 Cucumber 中使用 PicoContainer 进行依赖注入的方法。尽管 PicoContainer 比较轻量，也是 Cucumber 官方推荐的依赖注入工具，但在 Java 技术栈，Spring 或 Spring Boot 框架才是主流，除了提供依赖注入功能外，其还提供诸多其它实用功能（如灵活的配置、方便的数据库连接、易用的组件集成方法等），所以探索 Cucumber 与 Spring Boot 的集成很有必要。本文即接着前面的两篇文章，同样以登录 GitHub 并在页面创建 Issue 为测试场景，以示例工程的方式演示 Cucumber 与 Spring Boot 的集成，示例工程实现语言为 Java，使用的浏览器测试工具为 Selenium，工程使用 Maven 管理。</description></item><item><title>如何在 Cucumber Java 中使用 PicoContainer 进行依赖注入？</title><link>https://leileiluoluo.github.io/posts/cucumber-java-dependency-injection-using-picocontainer.html</link><pubDate>Fri, 31 May 2024 16:50:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-java-dependency-injection-using-picocontainer.html</guid><description>上文「如何使用 Cucumber Java 进行 UI 测试？」以登录 GitHub 并在页面上创建 Issue 为例演示了 Cucumber Java 与 Selenium 的集成，以及 UI 测试工程的搭建及测试用例的编写。您可能注意到，上文演示的测试工程未使用依赖注入工具，对象的创建均是使用最原生的 new 方式来实现的。这对于大型工程来说，会显得非常笨拙。本文主要介绍 Cucumber Java 与依赖注入框架 PicoContainer 的集成，本文将对上文的测试工程进行改造，将所有手动创建对象的地方都交由 PicoContainer 来自动实现。</description></item><item><title>如何使用 Cucumber Java 进行 UI 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-cucumber.html</link><pubDate>Wed, 22 May 2024 17:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-cucumber.html</guid><description>上文「Cucumber 是什么？如何使用 Cucumber Java 进行 API 测试？」介绍了 Cucumber 中的基本概念，并以实例的方式演示了如何使用 Cucumber Java 进行 API 测试。本文基于此，以在页面创建 GitHub Issue 为例进一步探索如何使用 Cucumber Java 进行 UI（浏览器）测试。示例工程实现语言为 Java，使用的浏览器测试工具为 Selenium，工程使用 Maven 管理。</description></item><item><title>Cucumber 是什么？如何使用 Cucumber Java 进行 API 测试？</title><link>https://leileiluoluo.github.io/posts/cucumber-introduction.html</link><pubDate>Sat, 18 May 2024 18:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-introduction.html</guid><description>Cucumber 是一个支持 BDD（Behaviour-Driven Development，行为驱动开发）的自动化测试工具。
本文首先会对 BDD 进行介绍，接着对 Cucumber 中用到的概念进行介绍，最后以样例的方式演示如何使用 Cucumber Java 进行 API 测试。</description></item></channel></rss>