<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on 磊磊落落</title><link>https://leileiluoluo.github.io/tags/spring/</link><description>Recent content in Spring on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 16 Sep 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>如何搭建 Spring Cloud 统一配置服务？</title><link>https://leileiluoluo.github.io/posts/spring-cloud-config-server-setup.html</link><pubDate>Mon, 16 Sep 2024 20:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-cloud-config-server-setup.html</guid><description>Spring Cloud 配置服务可以用于统一管理微服务的配置。相比于在各个微服务分别编写独立的配置文件，统一的配置服务可以大大提升维护配置文件的效率。
本文将依次搭建一个 Registry Service、Config Service、App Service 来演示 Config Service 的作用。其中 Registry Service 是一个 Eureka Server，即服务注册中心；Config Service 是本文的主角，即使用了 Spring Cloud Config Server 的统一配置中心；App Service 是统一配置的使用者，即普通的微服务。</description></item><item><title>Cucumber Java 如何与 Spring Boot 进行集成？</title><link>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</link><pubDate>Sun, 02 Jun 2024 14:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</guid><description>前面我们在「如何使用 Cucumber Java 进行 UI 测试？」一文中，以登录 GitHub 并在页面创建 Issue 为例介绍了 Cucumber 与 Selenium 的集成，但其中的示例工程未使用依赖注入工具，所有对象的新建均是使用原生 new 关键字来实现的。接着，我们在上文「如何在 Cucumber Java 中使用 PicoContainer 进行依赖注入？」介绍了在 Cucumber 中使用 PicoContainer 进行依赖注入的方法。尽管 PicoContainer 比较轻量，也是 Cucumber 官方推荐的依赖注入工具，但在 Java 技术栈，Spring 或 Spring Boot 框架才是主流，除了提供依赖注入功能外，其还提供诸多其它实用功能（如灵活的配置、方便的数据库连接、易用的组件集成方法等），所以探索 Cucumber 与 Spring Boot 的集成很有必要。本文即接着前面的两篇文章，同样以登录 GitHub 并在页面创建 Issue 为测试场景，以示例工程的方式演示 Cucumber 与 Spring Boot 的集成，示例工程实现语言为 Java，使用的浏览器测试工具为 Selenium，工程使用 Maven 管理。</description></item><item><title>如何使用 Spring Data MongoDB 访问 MongoDB 数据库？</title><link>https://leileiluoluo.github.io/posts/spring-data-mongodb.html</link><pubDate>Tue, 26 Mar 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-data-mongodb.html</guid><description>Spring Data MongoDB 是 Spring 框架提供的一个访问 MongoDB 数据库的模块，该模块延续了 Spring Data 系列统一的数据库访问风格（通过 Template 的方式与定义 Repository 接口的方式），借助于该模块可以使 MongoDB 的访问变得简单又高效。</description></item><item><title>Spring Boot 如何集成 MyBatis 进行数据库访问？</title><link>https://leileiluoluo.github.io/posts/spring-boot-mybatis-integration.html</link><pubDate>Sun, 17 Mar 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-boot-mybatis-integration.html</guid><description>MyBatis 是一个适用于 Java 语言的持久层框架。MyBatis 支持以注解或 XML 配置的方式来定义 SQL 查询，以及查询结果和 Java 对象的映射。MyBatis 相比于 Java 另一个流行持久层框架 JPA 来说（具体使用请参看「如何使用 Spring Data JPA 进行数据库访问？ 」），最大的特点是 MyBatis 具有更灵活的 SQL 控制能力。</description></item><item><title>如何使用 Spring Data JPA 进行数据库访问？</title><link>https://leileiluoluo.github.io/posts/spring-data-jpa.html</link><pubDate>Mon, 26 Feb 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-data-jpa.html</guid><description>JPA（Jakarta Persistence API）是一种基于 ORM（Object-Relational Mapping，对象关系映射）技术的 Java EE 规范，用于在 Java 应用程序和关系型数据库之间持久化、访问和管理数据。JPA 规范提供了一系列注解和 API 用于将 Java 对象映射到数据库表、定义实体之间的关系以及执行数据库操作，从而简化了 Java 应用程序数据持久化层的开发。</description></item><item><title>如何使用 Spring JDBC 进行数据库访问？</title><link>https://leileiluoluo.github.io/posts/spring-jdbc.html</link><pubDate>Thu, 22 Feb 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-jdbc.html</guid><description>Spring JDBC 是 Spring 框架提供的一个基于 Java JDBC 之上的用于操作关系型数据库的模块，其提供对数据库连接的管理、数据库访问、SQL 执行结果获取、事务支持和异常处理等功能。本文首先对 Spring JDBC 的基础知识进行介绍，然后准备一下测试数据与示例工程，最后以示例代码的方式来演示 Spring JDBC 的使用。</description></item><item><title>Spring Boot 如何使用 Validation 包进行输入参数校验？</title><link>https://leileiluoluo.github.io/posts/spring-boot-input-validation.html</link><pubDate>Mon, 08 Jan 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-boot-input-validation.html</guid><description>Spring Boot 自带的 spring-boot-starter-validation 包支持以标准注解的方式进行输入参数校验。spring-boot-starter-validation 包主要引用了 hibernate-validator 包，其参数校验功能就是 hibernate-validator 包所提供的。</description></item><item><title>如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？</title><link>https://leileiluoluo.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</link><pubDate>Tue, 12 Sep 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</guid><description>本文将探索「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」。本文将以搭建一个真实项目的方式来演示使用 Kotlin 构建 RESTful API 服务的整个过程，除了整体框架采用 Spring Boot 外，该项目的依赖管理采用的是 Gradle、数据库访问采用的是 MyBatis，数据库使用的是本地搭建的 MySQL。</description></item><item><title>如何使用 Spring Boot 构建一个 RESTful Web 服务</title><link>https://leileiluoluo.github.io/posts/building-a-restful-web-service-with-spring-boot.html</link><pubDate>Sun, 04 Jun 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/building-a-restful-web-service-with-spring-boot.html</guid><description>上文「如何快速搭建一个 Spring Boot 项目」介绍了使用 Spring Initializr 搭建 Spring Boot 模板项目的方法。本文接着介绍如何使用 Spring Boot 构建一个 RESTful Web 服务，主要关注项目的结构、注解的使用和单元测试代码的编写，并由此探索 Spring Boot 的设计理念与使用方法。</description></item><item><title>如何快速搭建一个 Spring Boot 项目</title><link>https://leileiluoluo.github.io/posts/spring-boot-quick-start.html</link><pubDate>Sat, 03 Jun 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-boot-quick-start.html</guid><description>Spring Boot 可以用最少的配置来快速创建一个独立的、生产级的 Spring 应用程序。</description></item><item><title>如何使用 Maven 搭建 Spring Boot 父子项目？</title><link>https://leileiluoluo.github.io/posts/spring-boot-parent-child-projects-with-maven.html</link><pubDate>Sun, 12 Mar 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-boot-parent-child-projects-with-maven.html</guid><description>本文探索如何使用 Maven 来搭建 Spring Boot 父子项目，方便我们在搭建 Spring Boot 微服务时作参考。</description></item></channel></rss>