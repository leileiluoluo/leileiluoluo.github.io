<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构设计 on 磊磊落落</title><link>https://leileiluoluo.github.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><description>Recent content in 架构设计 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 01 Nov 2024 18:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>博友圈 v2 版本技术架构</title><link>https://leileiluoluo.github.io/posts/boyouquan-v2-introduction.html</link><pubDate>Fri, 01 Nov 2024 18:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/boyouquan-v2-introduction.html</guid><description>&lt;p>&lt;a href="https://www.boyouquan.com">博友圈&lt;/a> v1 版本（源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-api/releases/tag/v1.10">boyouquan&lt;/a>）是一个集前后端为一体的 Java 应用程序，其使用 Maven 管理，使用了 Spring Boot + Thymeleaf + MyBatis 技术，其中 Thymeleaf 负责页面渲染。&lt;/p>
&lt;p>而本次改造后的 v2 版本（前端源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-ui/releases/tag/v2.0">boyouquan-ui&lt;/a>，后端源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-api/releases/tag/v2.0">boyouquan-api&lt;/a>）则将博友圈单体项目进行了前后端分离。前端使用了 React 框架；后端依然使用 Spring Boot + MyBatis 框架，但去除了 Thymeleaf 渲染页面的部分，使得后端变为了一个纯净的 REST API 提供者。&lt;/p>
&lt;p>本文即重点介绍一下博友圈 v2 版本的前端、后端技术架构，以及部署架构。&lt;/p></description></item><item><title>博友圈的建站初衷、主要功能和技术架构（v1 版本）</title><link>https://leileiluoluo.github.io/posts/boyouquan-introduction.html</link><pubDate>Wed, 03 Apr 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/boyouquan-introduction.html</guid><description>&lt;p>我于去年 7 月份开发了一个独立博客收录网站 ——「&lt;a href="https://www.boyouquan.com">博友圈 - www.boyouquan.com&lt;/a>」，该网站建立至今已有 9 个月的时间，各项功能运行稳定，本文主要回顾一下该网站的建站初衷，并基于当前最新的版本（&lt;a href="https://github.com/leileiluoluo/boyouquan/releases/tag/v1.10">v1.10&lt;/a>）介绍一下该网站的主要功能和技术架构。&lt;/p></description></item><item><title>什么是 OWASP Top 10？</title><link>https://leileiluoluo.github.io/posts/owasp-top-ten.html</link><pubDate>Mon, 15 May 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/owasp-top-ten.html</guid><description>OWASP（Open Worldwide Application Security Project，开放全球应用程序安全项目）是一个致力于提高软件安全性的非营利性组织，其提供 Web 应用程序安全领域的标准、工具和指导手册，被业界大量的企业作为权威来参考。</description></item><item><title>Selenium 自动化测试最佳实践</title><link>https://leileiluoluo.github.io/posts/selenium-best-practices.html</link><pubDate>Wed, 10 May 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-best-practices.html</guid><description>前两篇文章「Selenium WebDriver 基础使用」和「Selenium WebDriver 高级特性使用」分别介绍了 Selenium WebDriver 的基础功能和高级功能的使用。这两篇文章更多的是从底层实现细节的角度去练习 Selenium WebDriver API 的使用。</description></item><item><title>5 种常用的云迁移方法及其优缺点</title><link>https://leileiluoluo.github.io/posts/cloud-migration-approaches.html</link><pubDate>Sat, 04 Mar 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cloud-migration-approaches.html</guid><description>云迁移是将数字系统的一部分或全部迁移到云上的过程。主要有三种迁移方向：On-Premise 到云、云到云以及云到 On-Premise。
在进行迁移时，主要有 5 种方法或策略可以选择。如下为 Gartner 于 2011 年定义的“5 Rs”迁移方法：</description></item><item><title>API Gateway与Service Mesh有什么不同？</title><link>https://leileiluoluo.github.io/posts/api-gateway-and-service-mesh.html</link><pubDate>Mon, 14 Dec 2020 14:57:52 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/api-gateway-and-service-mesh.html</guid><description>一般的认为是：API Gateway用来处理南北向流量，Service Mesh用来处理东西向流量。这样的区分方式并不准确。下面会递进式分析两者的使用场景及异同点，以期通过本文可以明白何时使用API Gateway，何时使用Service Mesh？</description></item><item><title>为什么 Istio 重回单体架构？</title><link>https://leileiluoluo.github.io/posts/why-istio-back-to-monolithic-architecture.html</link><pubDate>Wed, 09 Dec 2020 17:52:16 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/why-istio-back-to-monolithic-architecture.html</guid><description>随着应用规模的不断扩大，单体架构已不能承载企业越来越多的业务需求，微服务架构随之兴起。微服务给我们带来诸多益处的同时也带来诸多挑战，其根源即是复杂性的提升。为了解决微服务带来的诸多问题，其中便催生了服务网格的流行。但2020年初，业内最知名的服务网格实现Istio却反其道而行之，由微服务架构重回单体架构，其原因是什么呢？可能是一个契机，让我们重新审思微服务架构带来的好处及问题。
1 微服务架构有什么优势？ 将一个复杂的单体应用切分为按领域细分的微服务后，可以让团队聚焦所关注的领域，做到相互独立，彼此不受影响。其带来的优势主要有：
彼此独立交付，快速迭代 各自解耦的微服务，可以让彼此间有明确的边界，各自可以采用不同的语言或技术栈，基于轻量协议（HTTP，RPC等）进行交互。每个微服务可以拥有自己的生命周期，无须相互协调或等待，做到彼此独立交付，相互不受影响。因粒度小，迭代快，从总体看，可以做到并行开发，流水线式产出。</description></item><item><title>什么是服务网格？</title><link>https://leileiluoluo.github.io/posts/what-is-a-service-mesh.html</link><pubDate>Mon, 07 Dec 2020 15:37:44 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/what-is-a-service-mesh.html</guid><description>1 什么是服务网格？ 服务网格是分布式软件系统内部用于管理所有“服务到服务”通信的一个系统。
聊服务网格为什么会出现之前，可以聊聊服务架构的演进过程。起初，我们使用一个单体应用来提供服务。 比如我们在做一个电商系统，采用典型的MVC三层架构，在单体架构中，组成这个系统的购物车功能，库存查询功能，订单功能等都是这个服务内部的一个函数或接口。所以这些操作都是进程内的函数调用，不涉及诸如RPC等服务与服务的跨进程通信。但随着时间的增加，我们发现单体架构越来越不能满足我们的需求，比如用户访问暴增，业务逻辑愈加复杂，一个单体的服务已不能满足功能及性能的要求。我们需要将其按业务领域拆分为几个独立的服务来对外提供服务，这就是微服务架构。比如原来的购物车功能，库存查询功能，订单功能被拆分为独立的服务。这时接收到一个购物请求，我们需要分别查询不同的微服务来进行业务处理，这就涉及跨进程通信。</description></item><item><title>威胁建模</title><link>https://leileiluoluo.github.io/posts/threat-modeling.html</link><pubDate>Sun, 19 Apr 2020 17:57:50 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/threat-modeling.html</guid><description>威胁建模是一个识别潜在威胁的过程。通过威胁建模以期找出攻击者的画像及其最可能的攻击路线，以及最易遭受攻击的资产。所以威胁建模做的即是找到最易攻击的地方并制定出应对方案。
概念上讲，威胁建模就在我们的日常生活中，只是我们未察觉而已。上班早高峰规避危险的操作及地方等以防可能出现的事故。在操场玩耍的孩子们找出最佳路径直奔目的地以规避校霸围追堵截。在更正式的场景，威胁建模从远古起即已用于军事防卫等备战规划上了。
威胁建模的演进 主要有如下几个。
1999，微软提出STRIDE模型识别攻击。</description></item><item><title>构建SaaS应用的十二因子指导原则</title><link>https://leileiluoluo.github.io/posts/12-factor-app.html</link><pubDate>Fri, 20 Mar 2020 23:43:02 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/12-factor-app.html</guid><description>现代软件通常以Web服务的方式交付，称为软件即服务（SaaS），十二因子指导原则即是构建SaaS应用的一套方法论。其不仅是构建SaaS应用的指导原则，也是微服务，云原生应用开发须遵循的指导原则。
十二因子指导原则或者最佳实践以期达到：
使用统一的规范，可以使新进开发人员节省时间成本，按照最佳实践走即可；
应用应与底层操作系统解耦，以在各种运行环境之间提供最大的可移植性；
应用应适于部署在现代化云平台上，摒弃对服务器和系统管理的依赖；</description></item><item><title>OpenID Connect 1.0 协议要点梳理</title><link>https://leileiluoluo.github.io/posts/openid-connect-core-1-0.html</link><pubDate>Wed, 26 Feb 2020 01:29:09 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/openid-connect-core-1-0.html</guid><description>OpenID Connect 1.0协议是基于OAuth 2.0授权框架之上的一个身份鉴别层。其使得客户端可以基于授权服务的鉴权能力来验证及识别终端用户的身份。此外，还可以一种类REST的方式来获取终端用户的基本画像信息。
OpenID Connect 1.</description></item><item><title>OAuth 2.0 授权框架梳理</title><link>https://leileiluoluo.github.io/posts/oauth2-authorization-framework.html</link><pubDate>Mon, 10 Feb 2020 04:57:37 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/oauth2-authorization-framework.html</guid><description>OAuth 2.0是一个委托访问授权框架。
即，若有三方应用想访问我在某网站的一些资源，我不必将用户名密码给它，而是采用OAuth 2.0授权流程，让资源网站通过我的授权给其下发一个访问令牌来实现该功能。
这样即省去了直接将密码交给三方网站的诸多风险，还可以很好的实现资源限制，令牌过期等细粒度控制。</description></item></channel></rss>