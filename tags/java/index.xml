<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 磊磊落落</title><link>https://leileiluoluo.github.io/tags/java/</link><description>Recent content in Java on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 27 Aug 2025 09:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>如何使用 Spring Event 实现内部模块间的轻松解耦？</title><link>https://leileiluoluo.github.io/posts/how-to-use-spring-event.html</link><pubDate>Wed, 27 Aug 2025 09:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-use-spring-event.html</guid><description>&lt;p>Spring Event 是 Spring 框架提供的一个核心组件，其允许服务内部不同模块之间通过观察者模式（发布-订阅模式）进行通信，从而实现模块间的解耦。&lt;/p>
&lt;p>即 Spring Event 是一种事件驱动的编程模型，一个模块在做完一件事后，无需直接调用其它模块处理后续逻辑，而是发布一个事件出来，由其它对该事件感兴趣的模块订阅并处理这个事件，事件发布者无需关注订阅者是谁，从而实现模块间的轻松解耦。&lt;/p></description></item><item><title>使用 Spring Data JPA 时如何捕捉实体的增删改操作？</title><link>https://leileiluoluo.github.io/posts/how-to-capture-entity-operations-in-spring-data-jpa.html</link><pubDate>Mon, 18 Aug 2025 20:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-capture-entity-operations-in-spring-data-jpa.html</guid><description>&lt;p>在 Spring Boot 工程中，若选用的持久化层框架是 JPA，那么要想捕捉所有实体的增删改操作，该怎么实现呢？&lt;/p>
&lt;p>下面给一个具体点的需求，然后我们来探讨如何实现：「假设我们要实现一个实体（表）操作监控模块，即捕获 Spring Boot 应用程序中所有实体的变更（包括增、删、改）操作，然后将这些操作记录到一张表中。」&lt;/p></description></item><item><title>在 Spring Boot 中如何优雅的编写一个服务工厂？</title><link>https://leileiluoluo.github.io/posts/how-to-write-a-service-factory-in-spring-boot.html</link><pubDate>Thu, 07 Aug 2025 16:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-write-a-service-factory-in-spring-boot.html</guid><description>在基于 Spring Boot 的业务开发中，我们有时会遇到这样的场景：即定义了一个通用接口，而该接口拥有多个实现类。在调用这些实现类时，我们通常需要编写一个工厂方法，该工厂方法可以根据指定的参数获取到对应的实现类。
那么，提供该工厂方法的类就是一个服务工厂，本文即是探讨如何优雅的编写这个服务工厂。</description></item><item><title>Spring Data Neo4j 指定 spring.data.neo4j.database 时报错该如何解决？</title><link>https://leileiluoluo.github.io/posts/spring-data-neo4j-database-config-error.html</link><pubDate>Mon, 05 May 2025 19:30:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-data-neo4j-database-config-error.html</guid><description>&lt;p>本人在对 Spring Data Neo4j 的实际使用中，发现一个问题，即：配置自定义 &lt;code>TransactionManager&lt;/code> 后，指定 &lt;code>spring.data.neo4j.database&lt;/code> 会报错。本文特对该问题进行记录、分析和解决，以给面临相同问题的朋友作参考。&lt;/p></description></item><item><title>如何使用 Spring Data 同时访问 MySQL 和 Neo4j 数据库？</title><link>https://leileiluoluo.github.io/posts/how-does-spring-data-operate-both-mysql-and-neo4j.html</link><pubDate>Mon, 05 May 2025 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-does-spring-data-operate-both-mysql-and-neo4j.html</guid><description>本文将以实例的方式探索「如何使用 Spring Data 同时访问 MySQL 和 Neo4j 数据库？」，涉及 Spring Boot 中多个数据源的配置、多个事务的配置，以及多组 Repository 的使用。</description></item><item><title>如何使用 Spring Data Neo4j 访问 Neo4j 数据库？</title><link>https://leileiluoluo.github.io/posts/spring-data-neo4j.html</link><pubDate>Thu, 05 Dec 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-data-neo4j.html</guid><description>上文「Neo4j 初探」介绍了 Neo4j 的基本概念，并对 Neo4j 进行了初步使用。本文则关注如何使用 Spring Data Neo4j 访问 Neo4j 数据库？Spring Data Neo4j 是 Spring Data 项目的一部分，它简化了与 Neo4j 图形数据库的交互。Spring Data Neo4j 除了可以通过 Repository 的方式轻松实现常见的 CRUD 操作外，还支持事务管理、Cypher 查询和图数据建模等特性。</description></item><item><title>博友圈 v2 版本技术架构</title><link>https://leileiluoluo.github.io/posts/boyouquan-v2-introduction.html</link><pubDate>Fri, 01 Nov 2024 18:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/boyouquan-v2-introduction.html</guid><description>&lt;p>&lt;a href="https://www.boyouquan.com">博友圈&lt;/a> v1 版本（源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-api/releases/tag/v1.10">boyouquan&lt;/a>）是一个集前后端为一体的 Java 应用程序，其使用 Maven 管理，使用了 Spring Boot + Thymeleaf + MyBatis 技术，其中 Thymeleaf 负责页面渲染。&lt;/p>
&lt;p>而本次改造后的 v2 版本（前端源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-ui/releases/tag/v2.0">boyouquan-ui&lt;/a>，后端源码：&lt;a href="https://github.com/leileiluoluo/boyouquan-api/releases/tag/v2.0">boyouquan-api&lt;/a>）则将博友圈单体项目进行了前后端分离。前端使用了 React 框架；后端依然使用 Spring Boot + MyBatis 框架，但去除了 Thymeleaf 渲染页面的部分，使得后端变为了一个纯净的 REST API 提供者。&lt;/p>
&lt;p>本文即重点介绍一下博友圈 v2 版本的前端、后端技术架构，以及部署架构。&lt;/p></description></item><item><title>Spring Boot 集成 Thymeleaf 搭建 Web 应用</title><link>https://leileiluoluo.github.io/posts/spring-boot-and-thymeleaf-integration.html</link><pubDate>Thu, 24 Oct 2024 16:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-boot-and-thymeleaf-integration.html</guid><description>Thymeleaf 是一个流行的 Java 模板引擎，具有处理 HTML、XML、JavaScript、CSS 和纯文本的能力。Thymeleaf 可以和 Spring Boot 进行无缝集成，且可以非常容易地对 Java Model 类及其字段进行访问，从而对模板内容进行动态渲染。并且，Thymeleaf 还提供了一组简单有力的表达式来支持循环、条件判断、静态工具类及 Spring Bean 访问等能力。此外，Thymeleaf 还对自定义扩展以及表单提供了很好的支持。</description></item><item><title>如何搭建 Spring Cloud 统一配置服务？</title><link>https://leileiluoluo.github.io/posts/spring-cloud-config-server-setup.html</link><pubDate>Mon, 16 Sep 2024 20:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/spring-cloud-config-server-setup.html</guid><description>Spring Cloud 配置服务可以用于统一管理微服务的配置。相比于在各个微服务分别编写独立的配置文件，统一的配置服务可以大大提升维护配置文件的效率。
本文将依次搭建一个 Registry Service、Config Service、App Service 来演示 Config Service 的作用。其中 Registry Service 是一个 Eureka Server，即服务注册中心；Config Service 是本文的主角，即使用了 Spring Cloud Config Server 的统一配置中心；App Service 是统一配置的使用者，即普通的微服务。</description></item><item><title>Java 13 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-13-new-features.html</link><pubDate>Sun, 25 Aug 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-13-new-features.html</guid><description>本文重点回顾 Java 13 引入的那些主要特性。
（Java 13 主要新特性脑图） 1 文本块（预览） Java 13 引入了文本块（Text Blocks）预览功能，以简化多行字符串的表示。文本块用三重引号 &amp;quot;&amp;quot;&amp;quot; 定义，支持格式化和保留换行符，使得处理多行字符串更直观。它还自动去除了前导和尾随空白，使字符串更干净，避免了传统转义字符的使用。这个预览特性为开发者提供了更好的代码可读性和维护性。</description></item><item><title>Java 12 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-12-new-features.html</link><pubDate>Tue, 13 Aug 2024 11:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-12-new-features.html</guid><description>本文重点回顾 Java 12 引入的那些主要特性。
（Java 12 主要新特性脑图） 1 Switch 表达式（预览） switch 语句是 Java 语言中除了 if-else 语句外的另一个流程控制语句。</description></item><item><title>Java 11 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-11-new-features.html</link><pubDate>Fri, 09 Aug 2024 10:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-11-new-features.html</guid><description>本文重点回顾 Java 11 引入的那些主要特性。
（Java 11 主要新特性脑图） 1 全新的 HTTP 客户端 API Java 11 引入了全新的 HTTP 客户端 API（主要有三个类 HttpClient、HttpRequest 和 HttpResponse），目的是替换现有的 HttpURLConnection API。</description></item><item><title>Java 10 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-10-new-features.html</link><pubDate>Tue, 06 Aug 2024 12:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-10-new-features.html</guid><description>本文重点回顾 Java 10 引入的那些主要特性。
（Java 10 主要新特性脑图） 1 局部变量类型推断 局部变量类型推断是 Java 10 引入的一个重要特性。这个特性使得开发者在声明局部变量时可以使用关键字 var 来代替显式地指定变量类型，而局部变量的类型会由编译器自行推断。</description></item><item><title>Java 9 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-9-new-features.html</link><pubDate>Thu, 01 Aug 2024 19:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-9-new-features.html</guid><description>本文重点回顾 Java 9 引入的那些新特性。
（Java 9 主要新特性脑图） 1 模块系统 Java 9 引入的一个最主要的特性就是模块系统（全称为 Java 平台模块系统，Java Platform Module System）。根据官方的定义，模块是一个命名的、自描述的代码和数据的集合。模块系统会在编译时和运行时之间新加一个可选的链接时，在该阶段可以将一组模块组装为一个自定义的运行时镜像。</description></item><item><title>Java 8 主要引入了哪些新特性？</title><link>https://leileiluoluo.github.io/posts/java-8-new-features.html</link><pubDate>Tue, 23 Jul 2024 10:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-8-new-features.html</guid><description>我们知道 Java 8 是 Java 发布历史上一个里程碑式的版本，哪怕现在 Java 的最新版本已发展到 22，但仍有相当一部分企业在使用 Java 8，可以说 Java 8 是后续 Java 新版本得以快速迭代的基石。本文即重点回顾 Java 8 引入的那些主要特性。</description></item><item><title>Java 虚拟机运行时数据区域划分详解</title><link>https://leileiluoluo.github.io/posts/java-virtual-machine-runtime-data-areas.html</link><pubDate>Fri, 19 Jul 2024 17:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/java-virtual-machine-runtime-data-areas.html</guid><description>Java 虚拟机（Java Virtual Machine，简称 JVM）是 Java 程序（字节码）的运行环境，其主要提供 Java 字节码执行（解释执行或者即时编译为本地机器码执行）、内存管理（内存分配和垃圾回收等）、多线程支持和安全控制等功能，是 Java 语言「一次编写，到处运行」口号得以实现的基石。</description></item><item><title>趣味算法题：从登录日志中计算各个用户的最长连续登录天数</title><link>https://leileiluoluo.github.io/posts/calculate-the-maximum-number-of-consecutive-login-days.html</link><pubDate>Thu, 18 Jul 2024 13:30:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/calculate-the-maximum-number-of-consecutive-login-days.html</guid><description>1 题目描述 假设我们有一个记录用户登录的日志文件，该文件有多行记录，每一行记录包含用户 ID、登录日期（格式为：yyyy-MM-dd）和登录时间（格式为：HH:mm:ss）三个以空格分割的条目。记录并不是以时间先后排序的，而是乱序的（如：样例输入中的记录 1002 2023-02-06 12:10:01 在 1002 2023-02-05 11:10:01 之前）。请计算每个用户的最长连续登录天数，输出格式为：用户 ID: 最长连续登录天数（如：样例输出中的 1002: 5）。</description></item><item><title>为什么说「组合优于继承」？</title><link>https://leileiluoluo.github.io/posts/favor-composition-over-inheritance.html</link><pubDate>Fri, 12 Jul 2024 19:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/favor-composition-over-inheritance.html</guid><description>面向对象编程中有一条经典的设计原则：组合优于继承，即多用组合少用继承。什么是继承？什么是组合？为什么不推荐使用继承？组合有哪些优势？如何判断该用组合还是该用继承？本文将围绕这几个问题来分析组合优于继承的原因。
1 什么是继承？什么是组合？ 继承（Inheritance）和组合（Composition）是面向对象编程（Object-Oriented Programming）中两种不同的代码复用机制。</description></item><item><title>Serenity BDD 如何与 Cucumber 进行集成？</title><link>https://leileiluoluo.github.io/posts/serenity-bdd-cucumber-integration.html</link><pubDate>Fri, 21 Jun 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/serenity-bdd-cucumber-integration.html</guid><description>我们知道，Serenity BDD 和 Cucumber Java 是两个常用的、适用于 Java 语言的自动化测试框架。Serenity BDD 框架功能丰富、内置了对业界通用的软件测试设计模式（诸如：页面对象模型、Screenplay 模式等）的支持，而 Cucumber 框架的一大优势是可以使用类似自然语言的方式（Gherkin 语法）来编写测试场景。因此，将两者进行集成将拥有叠加的能力。</description></item><item><title>如何使用 Serenity BDD 进行 API 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-serenity-bdd.html</link><pubDate>Wed, 19 Jun 2024 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-serenity-bdd.html</guid><description>前文「如何使用 Serenity BDD 进行 UI 测试？」介绍了使用 Serenity BDD 与 Selenium 进行 Web UI 测试的方法，但 Serenity BDD 不仅限于进行 UI 测试，还可以使用其进行 REST API 测试。本文即介绍使用 Serenity BDD 与 REST Assured 进行 API 测试的方法。</description></item></channel></rss>